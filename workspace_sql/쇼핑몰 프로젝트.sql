# 도서 쇼핑몰 프로젝트 테이블

# 1. 회원 테이블
CREATE TABLE SHOP_MEMBER (
	MEM_ID VARCHAR(20) PRIMARY KEY
	, MEM_PW VARCHAR(20) NOT NULL
	, MEM_NAME VARCHAR(20) NOT NULL
	, MEM_TEL VARCHAR(20)                          # 010-1111-2222
	, MEM_ADDR VARCHAR(50)
	, ADDR_DETAIL VARCHAR(50)
	, MEM_EMAIL VARCHAR(50) UNIQUE
	, MEM_ROLE VARCHAR(10) NOT NULL DEFAULT 'USER' # ADMIN, USER
	, JOIN_DATE DATETIME DEFAULT SYSDATE()
);

SELECT *
FROM shop_member;

# 2. 도서 카테고리 테이블
CREATE TABLE BOOK_CATEGORY(
	CATE_NUM INT PRIMARY KEY AUTO_INCREMENT
	, CATE_NAME VARCHAR(20) NOT NULL UNIQUE
);

INSERT INTO BOOK_CATEGORY VALUES (1, '소설');
INSERT INTO BOOK_CATEGORY VALUES (2, '인터넷/IT');
INSERT INTO BOOK_CATEGORY VALUES (3, '자기계발');

# 3. 도서 테이블
CREATE TABLE book(
	BOOK_NUM INT PRIMARY KEY AUTO_INCREMENT
	, TITLE VARCHAR(20) NOT NULL
	, PUBLISHER VARCHAR(20) NOT NULL
	, PRICE INT NOT NULL
	, REG_DATE DATETIME DEFAULT SYSDATE() # 쇼핑몰에 상품 등록한 날짜
	, BOOK_INTRO VARCHAR(50)
	, CATE_NUM INT REFERENCES BOOK_CATEGORY (CATE_NUM)
);

SELECT *
FROM book;

# 4. 도서 이미지 정보 테이블
CREATE TABLE BOOK_IMG (
	IMG_NUM INT PRIMARY KEY AUTO_INCREMENT
	, ORIGIN_IMG_NAME VARCHAR(100) # 원본 파일명
	, ATTACHED_IMG_NAME VARCHAR(100) # 첨부된 파일명
	, BOOK_NUM INT REFERENCES book (BOOK_NUM) ON DELETE CASCADE # 이미지의 원본 도서 번호
	, IS_MAIN VARCHAR(3) # 메인이미지면 : 'Y', 서브이미지 : 'N'
);

# 5. 장바구니 테이블

CREATE TABLE SHOP_CART (
	CART_NUM INT PRIMARY KEY AUTO_INCREMENT
	, BOOK_NUM INT REFERENCES book (BOOK_NUM)
	, CART_CNT INT NOT NULL # 장바구니에 담은 도서 수량
	, MEM_ID VARCHAR(20) REFERENCES shop_member (MEM_ID)
	, TOTAL_PRICE INT NOT NULL
	, CART_DATE DATETIME DEFAULT SYSDATE()
);

SELECT * 
FROM shop_cart;

SELECT *
FROM book_img;

# 6. 구매 정보 테이블
CREATE TABLE SHOP_BUY (
	BUY_NUM INT PRIMARY KEY AUTO_INCREMENT
	, BOOK_NUM INT REFERENCES book (BOOK_NUM)
	, MEM_ID VARCHAR(20) REFERENCES shop_member (MEM_ID)
	, BUY_DATE DATETIME DEFAULT SYSDATE()
	, BUY_CNT INT 
	, ORDER_NUM INT # 주문번호. 한 번에 여러상품을 구매하면 동일한 주문번호를 가짐 
);

SELECT *
FROM shop_buy;

SELECT ORDER_NUM
   , MAX(MEM_ID) MEM_ID
   , SUM((SELECT PRICE
       FROM BOOK
       WHERE BOOK_NUM = shop_buy.BOOK_NUM) * BUY_CNT) PRICE
   , MAX(BUY_DATE) BUY_DATE
   , CASE COUNT(ORDER_NUM) - 1
       WHEN 0 THEN MAX((SELECT TITLE
                       FROM book
                       WHERE BOOK_NUM = shop_buy.BOOK_NUM))
       ELSE CONCAT(MAX((SELECT TITLE
                       FROM book
                       WHERE BOOK_NUM = shop_buy.BOOK_NUM))
           , ' 외 '
           , COUNT(ORDER_NUM) - 1
           , '건') END TITLE
FROM shop_buy
WHERE BUY_DATE < ADDDATE('2025-09-04', 1)
GROUP BY ORDER_NUM
ORDER BY BUY_DATE DESC;

SELECT ADDDATE('2025-12-31', 1) DAY;

# 최근 10일 해당하는 날짜를 조회
SELECT ADDDATE(CURRENT_DATE(), -9)
	UNION ALL
	SELECT ADDDATE(CURRENT_DATE(), -8)
	UNION ALL
	SELECT ADDDATE(CURRENT_DATE(), -7)
	UNION ALL
	SELECT ADDDATE(CURRENT_DATE(), -6)
	UNION ALL
	SELECT ADDDATE(CURRENT_DATE(), -5)
	UNION ALL
	SELECT ADDDATE(CURRENT_DATE(), -4)
	UNION ALL
	SELECT ADDDATE(CURRENT_DATE(), -3)
	UNION ALL
	SELECT ADDDATE(CURRENT_DATE(), -2)
	UNION ALL
	SELECT ADDDATE(CURRENT_DATE(), -1)
	UNION ALL
	SELECT CURRENT_DATE();
	
# 오늘의 매출
SELECT IFNULL(SUM((SELECT PRICE 
		FROM book 
		WHERE BOOK_NUM = S.BOOK_NUM) * BUY_CNT), 0) TOTAL_PRICE
FROM shop_buy S
WHERE TO_CHAR(BUY_DATE, 'YYYY-MM-DD') = CURRENT_DATE()
UNION ALL
SELECT IFNULL(SUM((SELECT PRICE 
		FROM book 
		WHERE BOOK_NUM = S.BOOK_NUM) * BUY_CNT), 0) TOTAL_PRICE
FROM shop_buy S
WHERE TO_CHAR(BUY_DATE, 'YYYY-MM-DD') = ADDDATE(CURRENT_DATE(), -1)
UNION ALL
SELECT IFNULL(SUM((SELECT PRICE 
		FROM book 
		WHERE BOOK_NUM = S.BOOK_NUM) * BUY_CNT), 0) TOTAL_PRICE
FROM shop_buy S
WHERE TO_CHAR(BUY_DATE, 'YYYY-MM-DD') = ADDDATE(CURRENT_DATE(), -2)
UNION ALL
SELECT IFNULL(SUM((SELECT PRICE 
		FROM book 
		WHERE BOOK_NUM = S.BOOK_NUM) * BUY_CNT), 0) TOTAL_PRICE
FROM shop_buy S
WHERE TO_CHAR(BUY_DATE, 'YYYY-MM-DD') = ADDDATE(CURRENT_DATE(), -3)
UNION ALL
SELECT IFNULL(SUM((SELECT PRICE 
		FROM book 
		WHERE BOOK_NUM = S.BOOK_NUM) * BUY_CNT), 0) TOTAL_PRICE
FROM shop_buy S
WHERE TO_CHAR(BUY_DATE, 'YYYY-MM-DD') = ADDDATE(CURRENT_DATE(), -4)
UNION ALL
SELECT IFNULL(SUM((SELECT PRICE 
		FROM book 
		WHERE BOOK_NUM = S.BOOK_NUM) * BUY_CNT), 0) TOTAL_PRICE
FROM shop_buy S
WHERE TO_CHAR(BUY_DATE, 'YYYY-MM-DD') = ADDDATE(CURRENT_DATE(), -5)
UNION ALL
SELECT IFNULL(SUM((SELECT PRICE 
		FROM book 
		WHERE BOOK_NUM = S.BOOK_NUM) * BUY_CNT), 0) TOTAL_PRICE
FROM shop_buy S
WHERE TO_CHAR(BUY_DATE, 'YYYY-MM-DD') = ADDDATE(CURRENT_DATE(), -6)
UNION ALL
SELECT IFNULL(SUM((SELECT PRICE 
		FROM book 
		WHERE BOOK_NUM = S.BOOK_NUM) * BUY_CNT), 0) TOTAL_PRICE
FROM shop_buy S
WHERE TO_CHAR(BUY_DATE, 'YYYY-MM-DD') = ADDDATE(CURRENT_DATE(), -7)
UNION ALL
SELECT IFNULL(SUM((SELECT PRICE 
		FROM book 
		WHERE BOOK_NUM = S.BOOK_NUM) * BUY_CNT), 0) TOTAL_PRICE
FROM shop_buy S
WHERE TO_CHAR(BUY_DATE, 'YYYY-MM-DD') = ADDDATE(CURRENT_DATE(), -8)
UNION ALL
SELECT IFNULL(SUM((SELECT PRICE 
		FROM book 
		WHERE BOOK_NUM = S.BOOK_NUM) * BUY_CNT), 0) TOTAL_PRICE
FROM shop_buy S
WHERE TO_CHAR(BUY_DATE, 'YYYY-MM-DD') = ADDDATE(CURRENT_DATE(), -9);


SELECT TO_CHAR(BUY_DATE, 'YYYY-MM-DD')
FROM shop_buy;

# UNION ALL
# 여러 셀렉트 문을 하나의 셀렉트문처럼 동시에 실행
SELECT ENAME FROM emp WHERE EMPNO = 1001 
UNION ALL
SELECT ENAME FROM emp WHERE EMPNO = 1002;